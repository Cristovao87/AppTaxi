// <auto-generated />
using System;
using AppTaxi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AppTaxi.Migrations
{
    [DbContext(typeof(AppTaxiContext))]
    partial class AppTaxiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AppTaxi.Areas.Identity.Data.AppTaxiUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PrimeiroNome")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UltimoNome")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("AppTaxi.Models.Carro", b =>
                {
                    b.Property<int>("CarroID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiariaID");

                    b.Property<string>("Matricula");

                    b.HasKey("CarroID");

                    b.HasIndex("DiariaID");

                    b.ToTable("Carros");
                });

            modelBuilder.Entity("AppTaxi.Models.CarteiraPassageiro", b =>
                {
                    b.Property<int>("CarteiraPassageiroID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PagamentoID");

                    b.Property<int>("PessoaID");

                    b.Property<double>("Saldo");

                    b.HasKey("CarteiraPassageiroID");

                    b.HasIndex("PagamentoID");

                    b.HasIndex("PessoaID");

                    b.ToTable("CarteiraPassageiros");
                });

            modelBuilder.Entity("AppTaxi.Models.Cobrador", b =>
                {
                    b.Property<int>("CobradorID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiariaID");

                    b.Property<string>("NumeroAssociado");

                    b.Property<int>("PessoaID");

                    b.HasKey("CobradorID");

                    b.HasIndex("DiariaID");

                    b.HasIndex("PessoaID");

                    b.ToTable("Cobradores");
                });

            modelBuilder.Entity("AppTaxi.Models.Diaria", b =>
                {
                    b.Property<int>("DiariaID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Estado");

                    b.Property<int?>("RotaCorridaID");

                    b.Property<DateTime>("abertura");

                    b.Property<DateTime>("fecho");

                    b.HasKey("DiariaID");

                    b.HasIndex("RotaCorridaID");

                    b.ToTable("Diarias");
                });

            modelBuilder.Entity("AppTaxi.Models.Motorista", b =>
                {
                    b.Property<int>("MotoristaID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CarroID");

                    b.Property<string>("NumeroCarta");

                    b.Property<int>("PessoaID");

                    b.HasKey("MotoristaID");

                    b.HasIndex("CarroID");

                    b.HasIndex("PessoaID");

                    b.ToTable("Motoristas");
                });

            modelBuilder.Entity("AppTaxi.Models.Pagamento", b =>
                {
                    b.Property<int>("PagamentoID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Estado");

                    b.Property<double>("Valor");

                    b.Property<string>("tipo");

                    b.HasKey("PagamentoID");

                    b.ToTable("Pagamentos");
                });

            modelBuilder.Entity("AppTaxi.Models.Passageiro", b =>
                {
                    b.Property<int>("PassageiroID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PessoaID");

                    b.HasKey("PassageiroID");

                    b.HasIndex("PessoaID");

                    b.ToTable("Passageiros");
                });

            modelBuilder.Entity("AppTaxi.Models.Pessoa", b =>
                {
                    b.Property<int>("PessoaID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CarroID");

                    b.Property<string>("Estado");

                    b.Property<string>("Nome");

                    b.Property<int>("UsuarioID");

                    b.HasKey("PessoaID");

                    b.HasIndex("CarroID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("Pessoas");
                });

            modelBuilder.Entity("AppTaxi.Models.Rota", b =>
                {
                    b.Property<int>("RotaID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Custo");

                    b.Property<string>("Estado");

                    b.HasKey("RotaID");

                    b.ToTable("Rotas");
                });

            modelBuilder.Entity("AppTaxi.Models.RotaCorrida", b =>
                {
                    b.Property<int>("RotaCorridaID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Estado");

                    b.Property<int>("PagamentoID");

                    b.Property<int>("RotaID");

                    b.Property<DateTime>("TimeFim");

                    b.Property<DateTime>("TimeInicio");

                    b.Property<double>("Valor");

                    b.HasKey("RotaCorridaID");

                    b.HasIndex("PagamentoID");

                    b.HasIndex("RotaID");

                    b.ToTable("RotaCorridas");
                });

            modelBuilder.Entity("AppTaxi.Models.RotaDestino", b =>
                {
                    b.Property<int>("RotaDestinoID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Destino");

                    b.Property<int>("RotaID");

                    b.HasKey("RotaDestinoID");

                    b.HasIndex("RotaID");

                    b.ToTable("RotaDestinos");
                });

            modelBuilder.Entity("AppTaxi.Models.RotaOrigem", b =>
                {
                    b.Property<int>("RotaOrigemID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Origem");

                    b.Property<int>("RotaID");

                    b.HasKey("RotaOrigemID");

                    b.HasIndex("RotaID");

                    b.ToTable("RotaOrigens");
                });

            modelBuilder.Entity("AppTaxi.Models.Usuario", b =>
                {
                    b.Property<int>("UsuarioID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("User");

                    b.Property<string>("password");

                    b.Property<string>("tipo");

                    b.HasKey("UsuarioID");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AppTaxi.Models.Carro", b =>
                {
                    b.HasOne("AppTaxi.Models.Diaria", "Diaria")
                        .WithMany("Carros")
                        .HasForeignKey("DiariaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AppTaxi.Models.CarteiraPassageiro", b =>
                {
                    b.HasOne("AppTaxi.Models.Pagamento", "Pagamento")
                        .WithMany("CarteiraPassageiros")
                        .HasForeignKey("PagamentoID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppTaxi.Models.Pessoa", "Pessoa")
                        .WithMany()
                        .HasForeignKey("PessoaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AppTaxi.Models.Cobrador", b =>
                {
                    b.HasOne("AppTaxi.Models.Diaria", "Diaria")
                        .WithMany("Cobradores")
                        .HasForeignKey("DiariaID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppTaxi.Models.Pessoa", "Pessoa")
                        .WithMany("Cobradores")
                        .HasForeignKey("PessoaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AppTaxi.Models.Diaria", b =>
                {
                    b.HasOne("AppTaxi.Models.RotaCorrida")
                        .WithMany("Diaria")
                        .HasForeignKey("RotaCorridaID");
                });

            modelBuilder.Entity("AppTaxi.Models.Motorista", b =>
                {
                    b.HasOne("AppTaxi.Models.Carro", "Carro")
                        .WithMany()
                        .HasForeignKey("CarroID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppTaxi.Models.Pessoa", "Pessoa")
                        .WithMany("Motoristas")
                        .HasForeignKey("PessoaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AppTaxi.Models.Passageiro", b =>
                {
                    b.HasOne("AppTaxi.Models.Pessoa", "Pessoa")
                        .WithMany("Passageiros")
                        .HasForeignKey("PessoaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AppTaxi.Models.Pessoa", b =>
                {
                    b.HasOne("AppTaxi.Models.Carro")
                        .WithMany("Pessoas")
                        .HasForeignKey("CarroID");

                    b.HasOne("AppTaxi.Models.Usuario", "Usuario")
                        .WithMany("Pessoas")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AppTaxi.Models.RotaCorrida", b =>
                {
                    b.HasOne("AppTaxi.Models.Pagamento", "Pagamento")
                        .WithMany("RotaCorridas")
                        .HasForeignKey("PagamentoID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppTaxi.Models.Rota", "Rota")
                        .WithMany()
                        .HasForeignKey("RotaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AppTaxi.Models.RotaDestino", b =>
                {
                    b.HasOne("AppTaxi.Models.Rota", "Rota")
                        .WithMany()
                        .HasForeignKey("RotaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AppTaxi.Models.RotaOrigem", b =>
                {
                    b.HasOne("AppTaxi.Models.Rota", "Rota")
                        .WithMany()
                        .HasForeignKey("RotaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AppTaxi.Areas.Identity.Data.AppTaxiUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AppTaxi.Areas.Identity.Data.AppTaxiUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppTaxi.Areas.Identity.Data.AppTaxiUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AppTaxi.Areas.Identity.Data.AppTaxiUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
